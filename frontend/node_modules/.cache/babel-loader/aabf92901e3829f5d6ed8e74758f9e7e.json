{"ast":null,"code":"var _jsxFileName = \"/Users/marcin/Desktop/flask-react-blog/frontend/src/components/Home/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { NotLogged } from \"../../views/NotLogged\";\nimport { Post } from \"./Post/Post\";\nimport { API } from \"../../services/api\";\nimport { Button, List } from \"antd\";\nimport './layout.css';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  _s();\n\n  const [postList, setPostList] = useState([]);\n  const [page, setPage] = useState(1);\n  const loader = useRef(null);\n  useEffect(() => {\n    var options = {\n      root: null,\n      rootMargin: \"20px\",\n      threshold: 1.0\n    }; // initialize IntersectionObserver\n    // and attaching to Load More div\n\n    const observer = new IntersectionObserver(handleObserver, options);\n\n    if (loader.current) {\n      observer.observe(loader.current);\n    }\n  }, []);\n  useEffect(() => {\n    API.get(`/post/last/${amountOfLoadedPosts}/${alreadyLoaded}`).then(response => {\n      let newPosts = posts;\n      Array.prototype.push.apply(newPosts, response.data);\n      console.log(newPosts);\n      setPosts(newPosts);\n    }).catch(errInfo => console.error(errInfo));\n  }, [alreadyLoaded]);\n\n  function loadMore() {\n    setAlreadyLoaded(alreadyLoaded + amountOfLoadedPosts);\n  }\n\n  if (posts === undefined || posts === [] || posts === null) {\n    return /*#__PURE__*/_jsxDEV(NotLogged, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(NotLogged, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n          pageStart: 0,\n          loadMore: loadMore,\n          hasMore: true,\n          loader: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loader\",\n            children: \"Loading ...\"\n          }, 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 33\n          }, this),\n          useWindow: false,\n          children: /*#__PURE__*/_jsxDEV(List, {\n            dataSource: posts,\n            renderItem: post => /*#__PURE__*/_jsxDEV(Post, {\n              title: post.title,\n              date: post.createdAt.$date,\n              body: post.body\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n  }\n}; // export const Home = () => {\n//\n//     // const [posts, setPosts] = useState([{\n//     //     _id: {$oid: \"000\"},\n//     //     title: 'Template title',\n//     //     body: 'Template body',\n//     //     author: {$oid: \"000\"},\n//     //     comments: [],\n//     //     createdAt: {$date: \"000\"},\n//     //     modified: false,\n//     //     lastModifyAt: {$date: \"000\"},\n//     // }])\n//\n//     const amountOfLoadedPosts = 10;\n//     const [alreadyLoaded, setAlreadyLoaded] = useState(0)\n//     const [posts, setPosts] = useState([])\n//\n//     useEffect(() => {\n//         API.get(`/post/last/${amountOfLoadedPosts}/${alreadyLoaded}`)\n//             .then((response) => {\n//                 let newPosts = posts\n//                 Array.prototype.push.apply(newPosts, response.data)\n//                 console.log(newPosts)\n//                 setPosts(newPosts)\n//             })\n//             .catch(errInfo => console.error(errInfo))\n//     }, [alreadyLoaded]);\n//\n//     function loadMore() {\n//         setAlreadyLoaded(alreadyLoaded + amountOfLoadedPosts)\n//     }\n//\n//     if (posts === undefined || posts === [] || posts === null){\n//         return (\n//             <NotLogged/>\n//         )\n//     }\n//     else {\n//         return (\n//             <NotLogged>\n//                 <div>\n//                     <InfiniteScroll\n//                         pageStart={0}\n//                         loadMore={loadMore}\n//                         hasMore={true}\n//                         loader={<div className=\"loader\" key={0}>Loading ...</div>}\n//                         useWindow={false}\n//                     >\n//                         <List\n//                             dataSource={posts}\n//                             renderItem={post => (\n//                                     <Post\n//                                         title={post.title}\n//                                         date={post.createdAt.$date}\n//                                         body={post.body}\n//                                     />\n//                                     )}\n//                         />\n//                     </InfiniteScroll>\n//                 </div>\n//\n//                 {/*<button onClick={loadMore} > </button>*/}\n//\n//             </NotLogged>\n//         );\n//     }\n// };\n// const [posts, setPosts] = useState([{\n//     _id: {$oid: \"000\"},\n//     title: 'Template title',\n//     body: 'Template body',\n//     author: {$oid: \"000\"},\n//     comments: [],\n//     createdAt: {$date: \"000\"},\n//     modified: false,\n//     lastModifyAt: {$date: \"000\"},\n// }])\n// useEffect(() => {\n//     API.get(\"/post/all\")\n//         .then((response) => {\n//             const sorted = response.data.sort((a, b) => b.createdAt.$date - a.createdAt.$date)\n//             setPosts(sorted)\n//         })\n//         .catch(errInfo => console.error(errInfo))\n// }, []);\n// console.log(posts)\n\n_s(Home, \"VbnGIKUCfFzRzWzb2u8+J3GSjxk=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/marcin/Desktop/flask-react-blog/frontend/src/components/Home/Home.js"],"names":["React","useEffect","useRef","useState","NotLogged","Post","API","Button","List","InfiniteScroll","Home","postList","setPostList","page","setPage","loader","options","root","rootMargin","threshold","observer","IntersectionObserver","handleObserver","current","observe","get","amountOfLoadedPosts","alreadyLoaded","then","response","newPosts","posts","Array","prototype","push","apply","data","console","log","setPosts","catch","errInfo","error","loadMore","setAlreadyLoaded","undefined","post","title","createdAt","$date","body"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport {NotLogged} from \"../../views/NotLogged\";\nimport {Post} from \"./Post/Post\";\nimport {API} from \"../../services/api\";\nimport {Button, List} from \"antd\";\nimport './layout.css'\nimport InfiniteScroll from 'react-infinite-scroller';\n\nexport const Home = () => {\n\n    const [postList, setPostList] = useState([]);\n    const [page, setPage] = useState(1);\n    const loader = useRef(null);\n\n    useEffect(() => {\n        var options = {\n            root: null,\n            rootMargin: \"20px\",\n            threshold: 1.0\n        };\n        // initialize IntersectionObserver\n        // and attaching to Load More div\n        const observer = new IntersectionObserver(handleObserver, options);\n        if (loader.current) {\n            observer.observe(loader.current)\n        }\n\n    }, []);\n\n    useEffect(() => {\n        API.get(`/post/last/${amountOfLoadedPosts}/${alreadyLoaded}`)\n            .then((response) => {\n                let newPosts = posts\n                Array.prototype.push.apply(newPosts, response.data)\n                console.log(newPosts)\n                setPosts(newPosts)\n            })\n            .catch(errInfo => console.error(errInfo))\n    }, [alreadyLoaded]);\n\n    function loadMore() {\n        setAlreadyLoaded(alreadyLoaded + amountOfLoadedPosts)\n    }\n\n    if (posts === undefined || posts === [] || posts === null){\n        return (\n            <NotLogged/>\n        )\n    }\n    else {\n        return (\n            <NotLogged>\n                <div>\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={loadMore}\n                        hasMore={true}\n                        loader={<div className=\"loader\" key={0}>Loading ...</div>}\n                        useWindow={false}\n                    >\n                        <List\n                            dataSource={posts}\n                            renderItem={post => (\n                                <Post\n                                    title={post.title}\n                                    date={post.createdAt.$date}\n                                    body={post.body}\n                                />\n                            )}\n                        />\n                    </InfiniteScroll>\n                </div>\n\n                {/*<button onClick={loadMore} > </button>*/}\n\n            </NotLogged>\n        );\n    }\n};\n\n// export const Home = () => {\n//\n//     // const [posts, setPosts] = useState([{\n//     //     _id: {$oid: \"000\"},\n//     //     title: 'Template title',\n//     //     body: 'Template body',\n//     //     author: {$oid: \"000\"},\n//     //     comments: [],\n//     //     createdAt: {$date: \"000\"},\n//     //     modified: false,\n//     //     lastModifyAt: {$date: \"000\"},\n//     // }])\n//\n//     const amountOfLoadedPosts = 10;\n//     const [alreadyLoaded, setAlreadyLoaded] = useState(0)\n//     const [posts, setPosts] = useState([])\n//\n//     useEffect(() => {\n//         API.get(`/post/last/${amountOfLoadedPosts}/${alreadyLoaded}`)\n//             .then((response) => {\n//                 let newPosts = posts\n//                 Array.prototype.push.apply(newPosts, response.data)\n//                 console.log(newPosts)\n//                 setPosts(newPosts)\n//             })\n//             .catch(errInfo => console.error(errInfo))\n//     }, [alreadyLoaded]);\n//\n//     function loadMore() {\n//         setAlreadyLoaded(alreadyLoaded + amountOfLoadedPosts)\n//     }\n//\n//     if (posts === undefined || posts === [] || posts === null){\n//         return (\n//             <NotLogged/>\n//         )\n//     }\n//     else {\n//         return (\n//             <NotLogged>\n//                 <div>\n//                     <InfiniteScroll\n//                         pageStart={0}\n//                         loadMore={loadMore}\n//                         hasMore={true}\n//                         loader={<div className=\"loader\" key={0}>Loading ...</div>}\n//                         useWindow={false}\n//                     >\n//                         <List\n//                             dataSource={posts}\n//                             renderItem={post => (\n//                                     <Post\n//                                         title={post.title}\n//                                         date={post.createdAt.$date}\n//                                         body={post.body}\n//                                     />\n//                                     )}\n//                         />\n//                     </InfiniteScroll>\n//                 </div>\n//\n//                 {/*<button onClick={loadMore} > </button>*/}\n//\n//             </NotLogged>\n//         );\n//     }\n// };\n\n// const [posts, setPosts] = useState([{\n//     _id: {$oid: \"000\"},\n//     title: 'Template title',\n//     body: 'Template body',\n//     author: {$oid: \"000\"},\n//     comments: [],\n//     createdAt: {$date: \"000\"},\n//     modified: false,\n//     lastModifyAt: {$date: \"000\"},\n// }])\n\n// useEffect(() => {\n//     API.get(\"/post/all\")\n//         .then((response) => {\n//             const sorted = response.data.sort((a, b) => b.createdAt.$date - a.createdAt.$date)\n//             setPosts(sorted)\n//         })\n//         .catch(errInfo => console.error(errInfo))\n// }, []);\n// console.log(posts)"]},"metadata":{},"sourceType":"module"}