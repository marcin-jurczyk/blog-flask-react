{"ast":null,"code":"var _jsxFileName = \"/Users/marcin/Desktop/flask-react-blog/frontend/src/components/Home/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { NotLogged } from \"../../views/NotLogged\";\nimport { Post } from \"./Post/Post\";\nimport { API } from \"../../services/api\";\nimport { Button, List } from \"antd\";\nimport './layout.css';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  _s();\n\n  // const [posts, setPosts] = useState([{\n  //     _id: {$oid: \"000\"},\n  //     title: 'Template title',\n  //     body: 'Template body',\n  //     author: {$oid: \"000\"},\n  //     comments: [],\n  //     createdAt: {$date: \"000\"},\n  //     modified: false,\n  //     lastModifyAt: {$date: \"000\"},\n  // }])\n  const amountOfLoadedPosts = 2;\n  const [alreadyLoaded, setAlreadyLoaded] = useState(0);\n  const [posts, setPosts] = useState([{\n    _id: {\n      $oid: \"000\"\n    },\n    title: 'Template title',\n    body: 'Template body',\n    author: {\n      $oid: \"000\"\n    },\n    comments: [],\n    createdAt: {\n      $date: \"000\"\n    },\n    modified: false,\n    lastModifyAt: {\n      $date: \"000\"\n    }\n  }]);\n  useEffect(() => {\n    API.get(`/post/last/${amountOfLoadedPosts}/${alreadyLoaded}`).then(response => {\n      console.log(response.data);\n      setPosts(response.data);\n    }).catch(errInfo => console.error(errInfo));\n  }, [alreadyLoaded, posts]);\n\n  function loadMore() {\n    setAlreadyLoaded(alreadyLoaded + amountOfLoadedPosts);\n  }\n\n  if (posts === undefined || posts === [] || posts === null) {\n    return /*#__PURE__*/_jsxDEV(NotLogged, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(NotLogged, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(List, {\n          dataSource: posts,\n          renderItem: post => /*#__PURE__*/_jsxDEV(Post, {\n            title: post.title,\n            date: post.createdAt.$date,\n            body: post.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadMore,\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n}; // useEffect(() => {\n//     API.get(\"/post/all\")\n//         .then((response) => {\n//             const sorted = response.data.sort((a, b) => b.createdAt.$date - a.createdAt.$date)\n//             setPosts(sorted)\n//         })\n//         .catch(errInfo => console.error(errInfo))\n// }, []);\n// console.log(posts)\n\n_s(Home, \"dkePzSOlA0LkgEtOJJE//+H1484=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/marcin/Desktop/flask-react-blog/frontend/src/components/Home/Home.js"],"names":["React","useEffect","useState","NotLogged","Post","API","Button","List","InfiniteScroll","Home","amountOfLoadedPosts","alreadyLoaded","setAlreadyLoaded","posts","setPosts","_id","$oid","title","body","author","comments","createdAt","$date","modified","lastModifyAt","get","then","response","console","log","data","catch","errInfo","error","loadMore","undefined","post"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,SAAR,QAAwB,uBAAxB;AACA,SAAQC,IAAR,QAAmB,aAAnB;AACA,SAAQC,GAAR,QAAkB,oBAAlB;AACA,SAAQC,MAAR,EAAgBC,IAAhB,QAA2B,MAA3B;AACA,OAAO,cAAP;AACA,OAAOC,cAAP,MAA2B,yBAA3B;;AAGA,OAAO,MAAMC,IAAI,GAAG,MAAM;AAAA;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,mBAAmB,GAAG,CAA5B;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,CAAC;AAChCa,IAAAA,GAAG,EAAE;AAACC,MAAAA,IAAI,EAAE;AAAP,KAD2B;AAEhCC,IAAAA,KAAK,EAAE,gBAFyB;AAGhCC,IAAAA,IAAI,EAAE,eAH0B;AAIhCC,IAAAA,MAAM,EAAE;AAACH,MAAAA,IAAI,EAAE;AAAP,KAJwB;AAKhCI,IAAAA,QAAQ,EAAE,EALsB;AAMhCC,IAAAA,SAAS,EAAE;AAACC,MAAAA,KAAK,EAAE;AAAR,KANqB;AAOhCC,IAAAA,QAAQ,EAAE,KAPsB;AAQhCC,IAAAA,YAAY,EAAE;AAACF,MAAAA,KAAK,EAAE;AAAR;AARkB,GAAD,CAAD,CAAlC;AAWArB,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,GAAG,CAACoB,GAAJ,CAAS,cAAaf,mBAAoB,IAAGC,aAAc,EAA3D,EACKe,IADL,CACWC,QAAD,IAAc;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACAhB,MAAAA,QAAQ,CAACa,QAAQ,CAACG,IAAV,CAAR;AACH,KAJL,EAKKC,KALL,CAKWC,OAAO,IAAIJ,OAAO,CAACK,KAAR,CAAcD,OAAd,CALtB;AAMH,GAPQ,EAON,CAACrB,aAAD,EAAgBE,KAAhB,CAPM,CAAT;;AASA,WAASqB,QAAT,GAAoB;AAChBtB,IAAAA,gBAAgB,CAACD,aAAa,GAAGD,mBAAjB,CAAhB;AACH;;AAED,MAAIG,KAAK,KAAKsB,SAAV,IAAuBtB,KAAK,KAAK,EAAjC,IAAuCA,KAAK,KAAK,IAArD,EAA0D;AACtD,wBACI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH,GAJD,MAKK;AACD,wBACI,QAAC,SAAD;AAAA,8BACI;AAAA,+BAQQ,QAAC,IAAD;AACI,UAAA,UAAU,EAAEA,KADhB;AAEI,UAAA,UAAU,EAAEuB,IAAI,iBACR,QAAC,IAAD;AACI,YAAA,KAAK,EAAEA,IAAI,CAACnB,KADhB;AAEI,YAAA,IAAI,EAAEmB,IAAI,CAACf,SAAL,CAAeC,KAFzB;AAGI,YAAA,IAAI,EAAEc,IAAI,CAAClB;AAHf;AAAA;AAAA;AAAA;AAAA;AAHZ;AAAA;AAAA;AAAA;AAAA;AARR;AAAA;AAAA;AAAA;AAAA,cADJ,eAqBI;AAAQ,QAAA,OAAO,EAAEgB,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA0BH;AACJ,CAxEM,C,CA0EP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAlFazB,I;;KAAAA,I","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {NotLogged} from \"../../views/NotLogged\";\nimport {Post} from \"./Post/Post\";\nimport {API} from \"../../services/api\";\nimport {Button, List} from \"antd\";\nimport './layout.css'\nimport InfiniteScroll from 'react-infinite-scroller';\n\n\nexport const Home = () => {\n\n    // const [posts, setPosts] = useState([{\n    //     _id: {$oid: \"000\"},\n    //     title: 'Template title',\n    //     body: 'Template body',\n    //     author: {$oid: \"000\"},\n    //     comments: [],\n    //     createdAt: {$date: \"000\"},\n    //     modified: false,\n    //     lastModifyAt: {$date: \"000\"},\n    // }])\n\n    const amountOfLoadedPosts = 2;\n    const [alreadyLoaded, setAlreadyLoaded] = useState(0)\n    const [posts, setPosts] = useState([{\n        _id: {$oid: \"000\"},\n        title: 'Template title',\n        body: 'Template body',\n        author: {$oid: \"000\"},\n        comments: [],\n        createdAt: {$date: \"000\"},\n        modified: false,\n        lastModifyAt: {$date: \"000\"},\n    }])\n\n    useEffect(() => {\n        API.get(`/post/last/${amountOfLoadedPosts}/${alreadyLoaded}`)\n            .then((response) => {\n                console.log(response.data)\n                setPosts(response.data)\n            })\n            .catch(errInfo => console.error(errInfo))\n    }, [alreadyLoaded, posts]);\n\n    function loadMore() {\n        setAlreadyLoaded(alreadyLoaded + amountOfLoadedPosts)\n    }\n\n    if (posts === undefined || posts === [] || posts === null){\n        return (\n            <NotLogged/>\n        )\n    }\n    else {\n        return (\n            <NotLogged>\n                <div>\n                    {/*<InfiniteScroll*/}\n                    {/*    pageStart={0}*/}\n                    {/*    // loadMore={loadFunc}*/}\n                    {/*    hasMore={true}*/}\n                    {/*    loader={<div className=\"loader\" key={0}>Loading ...</div>}*/}\n                    {/*    useWindow={false}*/}\n                    {/*>*/}\n                        <List\n                            dataSource={posts}\n                            renderItem={post => (\n                                    <Post\n                                        title={post.title}\n                                        date={post.createdAt.$date}\n                                        body={post.body}\n                                    />\n                                    )}\n                        />\n                    {/*</InfiniteScroll>*/}\n                </div>\n                <button onClick={loadMore} > </button>\n\n            </NotLogged>\n        );\n    }\n};\n\n// useEffect(() => {\n//     API.get(\"/post/all\")\n//         .then((response) => {\n//             const sorted = response.data.sort((a, b) => b.createdAt.$date - a.createdAt.$date)\n//             setPosts(sorted)\n//         })\n//         .catch(errInfo => console.error(errInfo))\n// }, []);\n// console.log(posts)"]},"metadata":{},"sourceType":"module"}