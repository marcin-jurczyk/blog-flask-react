{"ast":null,"code":"var _jsxFileName = \"/Users/marcin/Desktop/flask-react-blog/frontend/src/components/Home/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { NotLogged } from \"../../views/NotLogged\";\nimport { Post } from \"./Post/Post\";\nimport { API } from \"../../services/api\";\nimport { List } from \"antd\";\nimport './layout.css';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  _s();\n\n  // const [posts, setPosts] = useState([{\n  //     _id: {$oid: \"000\"},\n  //     title: 'Template title',\n  //     body: 'Template body',\n  //     author: {$oid: \"000\"},\n  //     comments: [],\n  //     createdAt: {$date: \"000\"},\n  //     modified: false,\n  //     lastModifyAt: {$date: \"000\"},\n  // }])\n  const amountOfLoadedPosts = 2;\n  const [alreadyLoaded, setAlreadyLoaded] = useState(0);\n  const [posts, setPosts] = useState([{\n    _id: {\n      $oid: \"000\"\n    },\n    title: 'Template title',\n    body: 'Template body',\n    author: {\n      $oid: \"000\"\n    },\n    comments: [],\n    createdAt: {\n      $date: \"000\"\n    },\n    modified: false,\n    lastModifyAt: {\n      $date: \"000\"\n    }\n  }]);\n  useEffect(() => {\n    API.get(`/post/last/${amountOfLoadedPosts}/${alreadyLoaded}`).then(response => {\n      setPosts(response.data);\n    }).catch(errInfo => console.error(errInfo));\n  }, [alreadyLoaded]);\n  console.log(posts);\n\n  function loadFunc() {\n    setAlreadyLoaded(alreadyLoaded + amountOfLoadedPosts);\n  }\n\n  if (posts === undefined || posts === [] || posts === null) {\n    return /*#__PURE__*/_jsxDEV(NotLogged, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(NotLogged, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n          pageStart: 0,\n          loadMore: loadFunc,\n          hasMore: true,\n          loader: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loader\",\n            children: \"Loading ...\"\n          }, 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 33\n          }, this),\n          useWindow: false,\n          children: /*#__PURE__*/_jsxDEV(List, {\n            dataSource: posts,\n            renderItem: post => /*#__PURE__*/_jsxDEV(Post, {\n              title: post.title,\n              date: post.createdAt.$date,\n              body: post.body\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n}; // useEffect(() => {\n//     API.get(\"/post/all\")\n//         .then((response) => {\n//             const sorted = response.data.sort((a, b) => b.createdAt.$date - a.createdAt.$date)\n//             setPosts(sorted)\n//         })\n//         .catch(errInfo => console.error(errInfo))\n// }, []);\n// console.log(posts)\n\n_s(Home, \"dkePzSOlA0LkgEtOJJE//+H1484=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/marcin/Desktop/flask-react-blog/frontend/src/components/Home/Home.js"],"names":["React","useEffect","useState","NotLogged","Post","API","List","InfiniteScroll","Home","amountOfLoadedPosts","alreadyLoaded","setAlreadyLoaded","posts","setPosts","_id","$oid","title","body","author","comments","createdAt","$date","modified","lastModifyAt","get","then","response","data","catch","errInfo","console","error","log","loadFunc","undefined","post"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {NotLogged} from \"../../views/NotLogged\";\nimport {Post} from \"./Post/Post\";\nimport {API} from \"../../services/api\";\nimport {List} from \"antd\";\nimport './layout.css'\nimport InfiniteScroll from 'react-infinite-scroller';\n\n\nexport const Home = () => {\n\n    // const [posts, setPosts] = useState([{\n    //     _id: {$oid: \"000\"},\n    //     title: 'Template title',\n    //     body: 'Template body',\n    //     author: {$oid: \"000\"},\n    //     comments: [],\n    //     createdAt: {$date: \"000\"},\n    //     modified: false,\n    //     lastModifyAt: {$date: \"000\"},\n    // }])\n\n    const amountOfLoadedPosts = 2;\n    const [alreadyLoaded, setAlreadyLoaded] = useState(0)\n    const [posts, setPosts] = useState([{\n        _id: {$oid: \"000\"},\n        title: 'Template title',\n        body: 'Template body',\n        author: {$oid: \"000\"},\n        comments: [],\n        createdAt: {$date: \"000\"},\n        modified: false,\n        lastModifyAt: {$date: \"000\"},\n    }])\n\n    useEffect(() => {\n        API.get(`/post/last/${amountOfLoadedPosts}/${alreadyLoaded}`)\n            .then((response) => {\n                setPosts(response.data)\n            })\n            .catch(errInfo => console.error(errInfo))\n    }, [alreadyLoaded]);\n    console.log(posts)\n\n    function loadFunc() {\n        setAlreadyLoaded(alreadyLoaded + amountOfLoadedPosts)\n    }\n\n    if (posts === undefined || posts === [] || posts === null){\n        return (\n            <NotLogged/>\n        )\n    }\n    else {\n        return (\n            <NotLogged>\n                <div>\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={loadFunc}\n                        hasMore={true}\n                        loader={<div className=\"loader\" key={0}>Loading ...</div>}\n                        useWindow={false}\n                    >\n                        <List\n                            dataSource={posts}\n                            renderItem={post => (\n                                    <Post\n                                        title={post.title}\n                                        date={post.createdAt.$date}\n                                        body={post.body}\n                                    />\n                                    )}\n                        />\n                    </InfiniteScroll>\n                </div>\n\n            </NotLogged>\n        );\n    }\n};\n\n// useEffect(() => {\n//     API.get(\"/post/all\")\n//         .then((response) => {\n//             const sorted = response.data.sort((a, b) => b.createdAt.$date - a.createdAt.$date)\n//             setPosts(sorted)\n//         })\n//         .catch(errInfo => console.error(errInfo))\n// }, []);\n// console.log(posts)"]},"metadata":{},"sourceType":"module"}