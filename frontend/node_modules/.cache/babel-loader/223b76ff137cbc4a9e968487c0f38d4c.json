{"ast":null,"code":"var _jsxFileName = \"/Users/marcin/Desktop/flask-react-blog/frontend/src/components/Home/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { NotLogged } from \"../../views/NotLogged\";\nimport { Post } from \"./Post/Post\";\nimport { API } from \"../../services/api\";\nimport { Button, List } from \"antd\";\nimport './layout.css';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  _s();\n\n  const [posts, setPosts] = useState([{\n    _id: {\n      $oid: \"000\"\n    },\n    title: 'Template title',\n    body: 'Template body',\n    author: {\n      $oid: \"000\"\n    },\n    comments: [],\n    createdAt: {\n      $date: \"000\"\n    },\n    modified: false,\n    lastModifyAt: {\n      $date: \"000\"\n    }\n  }]);\n  const [page, setPage] = useState(1);\n  const [postsLoaded, setPostsLoaded] = useState(0);\n  const loader = useRef(null);\n  useEffect(() => {\n    // initialize IntersectionObserver\n    // and attaching to Load More div\n    const observer = new IntersectionObserver(handleObserver);\n\n    if (loader.current) {\n      observer.observe(loader.current);\n    }\n  }, []);\n  useEffect(() => {\n    API.get(`/post/last/10/${postsLoaded}`).then(response => {\n      let newPosts = posts;\n      Array.prototype.push.apply(newPosts, response.data);\n      setPosts(newPosts);\n    }).catch(errInfo => console.error(errInfo)); // here we simulate adding new posts to List\n    // const newList = posts.list.concat([1,1,1,1]);\n    // setPosts({\n    //     list: newList\n    // })\n  }, [page]);\n\n  const handleObserver = entities => {\n    const target = entities[0];\n\n    if (target.isIntersecting) {\n      setPage(page => page + 1);\n    }\n\n    let val = postsLoaded;\n    setPostsLoaded(val + 10);\n  };\n\n  return /*#__PURE__*/_jsxDEV(NotLogged, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-list\",\n        children: [posts.map((post, index) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post\",\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\" \", post, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 33\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 37\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading\",\n          ref: loader,\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Load More\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}; // export const Home = () => {\n//\n//     // const [posts, setPosts] = useState([{\n//     //     _id: {$oid: \"000\"},\n//     //     title: 'Template title',\n//     //     body: 'Template body',\n//     //     author: {$oid: \"000\"},\n//     //     comments: [],\n//     //     createdAt: {$date: \"000\"},\n//     //     modified: false,\n//     //     lastModifyAt: {$date: \"000\"},\n//     // }])\n//\n//     const amountOfLoadedPosts = 10;\n//     const [alreadyLoaded, setAlreadyLoaded] = useState(0)\n//     const [posts, setPosts] = useState([])\n//\n//     useEffect(() => {\n//         API.get(`/post/last/${amountOfLoadedPosts}/${alreadyLoaded}`)\n//             .then((response) => {\n//                 let newPosts = posts\n//                 Array.prototype.push.apply(newPosts, response.data)\n//                 console.log(newPosts)\n//                 setPosts(newPosts)\n//             })\n//             .catch(errInfo => console.error(errInfo))\n//     }, [alreadyLoaded]);\n//\n//     function loadMore() {\n//         setAlreadyLoaded(alreadyLoaded + amountOfLoadedPosts)\n//     }\n//\n//     if (posts === undefined || posts === [] || posts === null){\n//         return (\n//             <NotLogged/>\n//         )\n//     }\n//     else {\n//         return (\n//             <NotLogged>\n//                 <div>\n//                     <InfiniteScroll\n//                         pageStart={0}\n//                         loadMore={loadMore}\n//                         hasMore={true}\n//                         loader={<div className=\"loader\" key={0}>Loading ...</div>}\n//                         useWindow={false}\n//                     >\n//                         <List\n//                             dataSource={posts}\n//                             renderItem={post => (\n//                                     <Post\n//                                         title={post.title}\n//                                         date={post.createdAt.$date}\n//                                         body={post.body}\n//                                     />\n//                                     )}\n//                         />\n//                     </InfiniteScroll>\n//                 </div>\n//\n//                 {/*<button onClick={loadMore} > </button>*/}\n//\n//             </NotLogged>\n//         );\n//     }\n// };\n// const [posts, setPosts] = useState([{\n//     _id: {$oid: \"000\"},\n//     title: 'Template title',\n//     body: 'Template body',\n//     author: {$oid: \"000\"},\n//     comments: [],\n//     createdAt: {$date: \"000\"},\n//     modified: false,\n//     lastModifyAt: {$date: \"000\"},\n// }])\n// useEffect(() => {\n//     API.get(\"/post/all\")\n//         .then((response) => {\n//             const sorted = response.data.sort((a, b) => b.createdAt.$date - a.createdAt.$date)\n//             setPosts(sorted)\n//         })\n//         .catch(errInfo => console.error(errInfo))\n// }, []);\n// console.log(posts)\n\n_s(Home, \"Aqn3A1r595fKCamed0ueXZWz0HM=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/marcin/Desktop/flask-react-blog/frontend/src/components/Home/Home.js"],"names":["React","useEffect","useRef","useState","NotLogged","Post","API","Button","List","InfiniteScroll","Home","posts","setPosts","_id","$oid","title","body","author","comments","createdAt","$date","modified","lastModifyAt","page","setPage","postsLoaded","setPostsLoaded","loader","observer","IntersectionObserver","handleObserver","current","observe","get","then","response","newPosts","Array","prototype","push","apply","data","catch","errInfo","console","error","entities","target","isIntersecting","val","map","post","index"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport {NotLogged} from \"../../views/NotLogged\";\nimport {Post} from \"./Post/Post\";\nimport {API} from \"../../services/api\";\nimport {Button, List} from \"antd\";\nimport './layout.css'\nimport InfiniteScroll from 'react-infinite-scroller';\n\n\nexport const Home = () => {\n\n    const [posts, setPosts] = useState([{\n        _id: {$oid: \"000\"},\n        title: 'Template title',\n        body: 'Template body',\n        author: {$oid: \"000\"},\n        comments: [],\n        createdAt: {$date: \"000\"},\n        modified: false,\n        lastModifyAt: {$date: \"000\"},\n    }])\n    const [page, setPage] = useState(1);\n    const [postsLoaded, setPostsLoaded] = useState(0)\n    const loader = useRef(null);\n\n    useEffect(() => {\n        // initialize IntersectionObserver\n        // and attaching to Load More div\n        const observer = new IntersectionObserver(handleObserver);\n        if (loader.current) {\n            observer.observe(loader.current)\n        }\n\n    }, []);\n\n    useEffect(() => {\n        API.get(`/post/last/10/${postsLoaded}`)\n            .then((response) => {\n                let newPosts = posts\n                Array.prototype.push.apply(newPosts, response.data)\n                setPosts(newPosts)\n            })\n            .catch(errInfo => console.error(errInfo))\n        // here we simulate adding new posts to List\n        // const newList = posts.list.concat([1,1,1,1]);\n        // setPosts({\n        //     list: newList\n        // })\n    }, [page])\n\n    const handleObserver = (entities) => {\n        const target = entities[0];\n        if (target.isIntersecting) {\n            setPage((page) => page + 1)\n        }\n        let val = postsLoaded\n        setPostsLoaded(val + 10)\n    }\n\n    return (\n        <NotLogged>\n            <div >\n                <div className=\"post-list\">\n                    {\n                        posts.map((post, index) => {\n                            return (<div key={index} className=\"post\" >\n                                <h2> {post } </h2>\n                            </div>)\n                        })\n                    }\n                    <div className=\"loading\" ref={loader}>\n                        <h2>Load More</h2>\n                    </div>\n                </div>\n            </div>\n        </NotLogged>\n    )\n\n};\n\n// export const Home = () => {\n//\n//     // const [posts, setPosts] = useState([{\n//     //     _id: {$oid: \"000\"},\n//     //     title: 'Template title',\n//     //     body: 'Template body',\n//     //     author: {$oid: \"000\"},\n//     //     comments: [],\n//     //     createdAt: {$date: \"000\"},\n//     //     modified: false,\n//     //     lastModifyAt: {$date: \"000\"},\n//     // }])\n//\n//     const amountOfLoadedPosts = 10;\n//     const [alreadyLoaded, setAlreadyLoaded] = useState(0)\n//     const [posts, setPosts] = useState([])\n//\n//     useEffect(() => {\n//         API.get(`/post/last/${amountOfLoadedPosts}/${alreadyLoaded}`)\n//             .then((response) => {\n//                 let newPosts = posts\n//                 Array.prototype.push.apply(newPosts, response.data)\n//                 console.log(newPosts)\n//                 setPosts(newPosts)\n//             })\n//             .catch(errInfo => console.error(errInfo))\n//     }, [alreadyLoaded]);\n//\n//     function loadMore() {\n//         setAlreadyLoaded(alreadyLoaded + amountOfLoadedPosts)\n//     }\n//\n//     if (posts === undefined || posts === [] || posts === null){\n//         return (\n//             <NotLogged/>\n//         )\n//     }\n//     else {\n//         return (\n//             <NotLogged>\n//                 <div>\n//                     <InfiniteScroll\n//                         pageStart={0}\n//                         loadMore={loadMore}\n//                         hasMore={true}\n//                         loader={<div className=\"loader\" key={0}>Loading ...</div>}\n//                         useWindow={false}\n//                     >\n//                         <List\n//                             dataSource={posts}\n//                             renderItem={post => (\n//                                     <Post\n//                                         title={post.title}\n//                                         date={post.createdAt.$date}\n//                                         body={post.body}\n//                                     />\n//                                     )}\n//                         />\n//                     </InfiniteScroll>\n//                 </div>\n//\n//                 {/*<button onClick={loadMore} > </button>*/}\n//\n//             </NotLogged>\n//         );\n//     }\n// };\n\n// const [posts, setPosts] = useState([{\n//     _id: {$oid: \"000\"},\n//     title: 'Template title',\n//     body: 'Template body',\n//     author: {$oid: \"000\"},\n//     comments: [],\n//     createdAt: {$date: \"000\"},\n//     modified: false,\n//     lastModifyAt: {$date: \"000\"},\n// }])\n\n// useEffect(() => {\n//     API.get(\"/post/all\")\n//         .then((response) => {\n//             const sorted = response.data.sort((a, b) => b.createdAt.$date - a.createdAt.$date)\n//             setPosts(sorted)\n//         })\n//         .catch(errInfo => console.error(errInfo))\n// }, []);\n// console.log(posts)"]},"metadata":{},"sourceType":"module"}