{"ast":null,"code":"var _jsxFileName = \"/Users/marcin/Desktop/flask-react-blog/frontend/src/components/Home/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { NotLogged } from \"../../views/NotLogged\";\nimport { Post } from \"./Post/Post\";\nimport { API } from \"../../services/api\";\nimport { List } from \"antd\";\nimport './layout.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  _s();\n\n  const postsAmount = 10;\n  const [postsRequest, setPostsRequest] = useState({\n    postsLoaded: 0,\n    posts: []\n  });\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const loader = useRef(null);\n  useEffect(() => {\n    const observer = new IntersectionObserver(handleObserver);\n\n    if (loader.current) {\n      observer.observe(loader.current);\n    }\n  }, []);\n  useEffect(() => {\n    API.get(`/post/last/${postsAmount}/${postsRequest.postsLoaded}`).then(response => {\n      if (loading === true) {\n        if (response.data !== []) {\n          setLoading(false);\n        }\n\n        console.log(\"weszlo\");\n        let newPosts = postsRequest.posts;\n        Array.prototype.push.apply(newPosts, response.data);\n        setPostsRequest({\n          postsLoaded: postsRequest.postsLoaded + Object.keys(response.data).length,\n          posts: newPosts\n        });\n      }\n    }).catch(errInfo => console.error(errInfo));\n  }, [page]);\n\n  const handleObserver = entities => {\n    const target = entities[0];\n\n    if (target.isIntersecting) {\n      setPage(page => page + 1);\n    }\n  };\n\n  function isLoading() {\n    if (loading === true) return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      ref: loader,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lds-ellipsis\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 51\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 57\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 63\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 69\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this);else return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(NotLogged, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-list\",\n        children: [/*#__PURE__*/_jsxDEV(List, {\n          dataSource: postsRequest.posts,\n          renderItem: post => /*#__PURE__*/_jsxDEV(Post, {\n            title: post.title,\n            date: post.createdAt.$date,\n            body: post.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this), isLoading()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}; // export const Home = () => {\n//\n//     // const [posts, setPosts] = useState([{\n//     //     _id: {$oid: \"000\"},\n//     //     title: 'Template title',\n//     //     body: 'Template body',\n//     //     author: {$oid: \"000\"},\n//     //     comments: [],\n//     //     createdAt: {$date: \"000\"},\n//     //     modified: false,\n//     //     lastModifyAt: {$date: \"000\"},\n//     // }])\n//\n//     const amountOfLoadedPosts = 10;\n//     const [alreadyLoaded, setAlreadyLoaded] = useState(0)\n//     const [posts, setPosts] = useState([])\n//\n//     useEffect(() => {\n//         API.get(`/post/last/${amountOfLoadedPosts}/${alreadyLoaded}`)\n//             .then((response) => {\n//                 let newPosts = posts\n//                 Array.prototype.push.apply(newPosts, response.data)\n//                 console.log(newPosts)\n//                 setPosts(newPosts)\n//             })\n//             .catch(errInfo => console.error(errInfo))\n//     }, [alreadyLoaded]);\n//\n//     function loadMore() {\n//         setAlreadyLoaded(alreadyLoaded + amountOfLoadedPosts)\n//     }\n//\n//     if (posts === undefined || posts === [] || posts === null){\n//         return (\n//             <NotLogged/>\n//         )\n//     }\n//     else {\n//         return (\n//             <NotLogged>\n//                 <div>\n//                     <InfiniteScroll\n//                         pageStart={0}\n//                         loadMore={loadMore}\n//                         hasMore={true}\n//                         loader={<div className=\"loader\" key={0}>Loading ...</div>}\n//                         useWindow={false}\n//                     >\n//                         <List\n//                             dataSource={posts}\n//                             renderItem={post => (\n//                                     <Post\n//                                         title={post.title}\n//                                         date={post.createdAt.$date}\n//                                         body={post.body}\n//                                     />\n//                                     )}\n//                         />\n//                     </InfiniteScroll>\n//                 </div>\n//\n//                 {/*<button onClick={loadMore} > </button>*/}\n//\n//             </NotLogged>\n//         );\n//     }\n// };\n// const [posts, setPosts] = useState([{\n//     _id: {$oid: \"000\"},\n//     title: 'Template title',\n//     body: 'Template body',\n//     author: {$oid: \"000\"},\n//     comments: [],\n//     createdAt: {$date: \"000\"},\n//     modified: false,\n//     lastModifyAt: {$date: \"000\"},\n// }])\n// useEffect(() => {\n//     API.get(\"/post/all\")\n//         .then((response) => {\n//             const sorted = response.data.sort((a, b) => b.createdAt.$date - a.createdAt.$date)\n//             setPosts(sorted)\n//         })\n//         .catch(errInfo => console.error(errInfo))\n// }, []);\n// console.log(posts)\n\n_s(Home, \"73wq2pc4sslCT3tB2MvmRNSeT8w=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/marcin/Desktop/flask-react-blog/frontend/src/components/Home/Home.js"],"names":["React","useEffect","useRef","useState","NotLogged","Post","API","List","Home","postsAmount","postsRequest","setPostsRequest","postsLoaded","posts","page","setPage","loading","setLoading","loader","observer","IntersectionObserver","handleObserver","current","observe","get","then","response","data","console","log","newPosts","Array","prototype","push","apply","Object","keys","length","catch","errInfo","error","entities","target","isIntersecting","isLoading","post","title","createdAt","$date","body"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport {NotLogged} from \"../../views/NotLogged\";\nimport {Post} from \"./Post/Post\";\nimport {API} from \"../../services/api\";\nimport {List} from \"antd\";\nimport './layout.css'\n\n\nexport const Home = () => {\n\n    const postsAmount = 10;\n    const [postsRequest, setPostsRequest] = useState({\n        postsLoaded: 0,\n        posts: []\n    });\n    const [page, setPage] = useState(1);\n    const [loading, setLoading] = useState(true)\n    const loader = useRef(null);\n\n\n    useEffect(() => {\n        const observer = new IntersectionObserver(handleObserver);\n        if (loader.current) {\n            observer.observe(loader.current)\n        }\n    }, []);\n\n    useEffect(() => {\n        API.get(`/post/last/${postsAmount}/${postsRequest.postsLoaded}`)\n            .then((response) => {\n                if (loading === true) {\n                    if (response.data !== []) {\n                        setLoading(false)\n                    }\n                    console.log(\"weszlo\")\n                    let newPosts = postsRequest.posts\n                    Array.prototype.push.apply(newPosts, response.data)\n                    setPostsRequest({\n                        postsLoaded: postsRequest.postsLoaded + Object.keys(response.data).length,\n                        posts: newPosts\n                    })\n                }\n            })\n            .catch(errInfo => console.error(errInfo))\n    }, [page])\n\n    const handleObserver = (entities) => {\n        const target = entities[0];\n        if (target.isIntersecting) {\n            setPage((page) => page + 1)\n        }\n    }\n\n    function isLoading() {\n        if (loading === true)\n            return (\n                <div className=\"loading\" ref={loader}>\n                    <div className=\"lds-ellipsis\"><div/><div/><div/><div/></div>\n                </div>\n            )\n        else\n            return null\n    }\n\n    return (\n        <NotLogged>\n            <div >\n                <div className=\"post-list\">\n                    {\n                        <List\n                            dataSource={postsRequest.posts}\n                            renderItem={post => (\n                                <Post\n                                    title={post.title}\n                                    date={post.createdAt.$date}\n                                    body={post.body}\n                                />\n                            )}\n                        />\n                    }\n                    {isLoading()}\n                </div>\n            </div>\n        </NotLogged>\n    )\n\n};\n\n// export const Home = () => {\n//\n//     // const [posts, setPosts] = useState([{\n//     //     _id: {$oid: \"000\"},\n//     //     title: 'Template title',\n//     //     body: 'Template body',\n//     //     author: {$oid: \"000\"},\n//     //     comments: [],\n//     //     createdAt: {$date: \"000\"},\n//     //     modified: false,\n//     //     lastModifyAt: {$date: \"000\"},\n//     // }])\n//\n//     const amountOfLoadedPosts = 10;\n//     const [alreadyLoaded, setAlreadyLoaded] = useState(0)\n//     const [posts, setPosts] = useState([])\n//\n//     useEffect(() => {\n//         API.get(`/post/last/${amountOfLoadedPosts}/${alreadyLoaded}`)\n//             .then((response) => {\n//                 let newPosts = posts\n//                 Array.prototype.push.apply(newPosts, response.data)\n//                 console.log(newPosts)\n//                 setPosts(newPosts)\n//             })\n//             .catch(errInfo => console.error(errInfo))\n//     }, [alreadyLoaded]);\n//\n//     function loadMore() {\n//         setAlreadyLoaded(alreadyLoaded + amountOfLoadedPosts)\n//     }\n//\n//     if (posts === undefined || posts === [] || posts === null){\n//         return (\n//             <NotLogged/>\n//         )\n//     }\n//     else {\n//         return (\n//             <NotLogged>\n//                 <div>\n//                     <InfiniteScroll\n//                         pageStart={0}\n//                         loadMore={loadMore}\n//                         hasMore={true}\n//                         loader={<div className=\"loader\" key={0}>Loading ...</div>}\n//                         useWindow={false}\n//                     >\n//                         <List\n//                             dataSource={posts}\n//                             renderItem={post => (\n//                                     <Post\n//                                         title={post.title}\n//                                         date={post.createdAt.$date}\n//                                         body={post.body}\n//                                     />\n//                                     )}\n//                         />\n//                     </InfiniteScroll>\n//                 </div>\n//\n//                 {/*<button onClick={loadMore} > </button>*/}\n//\n//             </NotLogged>\n//         );\n//     }\n// };\n\n// const [posts, setPosts] = useState([{\n//     _id: {$oid: \"000\"},\n//     title: 'Template title',\n//     body: 'Template body',\n//     author: {$oid: \"000\"},\n//     comments: [],\n//     createdAt: {$date: \"000\"},\n//     modified: false,\n//     lastModifyAt: {$date: \"000\"},\n// }])\n\n// useEffect(() => {\n//     API.get(\"/post/all\")\n//         .then((response) => {\n//             const sorted = response.data.sort((a, b) => b.createdAt.$date - a.createdAt.$date)\n//             setPosts(sorted)\n//         })\n//         .catch(errInfo => console.error(errInfo))\n// }, []);\n// console.log(posts)"]},"metadata":{},"sourceType":"module"}