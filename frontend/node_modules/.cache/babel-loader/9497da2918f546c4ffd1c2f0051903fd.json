{"ast":null,"code":"const hash = require('string-hash');\n\nconst color = require('tinycolor2');\n\nexport const gradient = (uid, type = 'diagonal', opacity = 1) => {\n  if (uid) {\n    const n = hash(uid);\n    let c1 = color({\n      h: n % 360,\n      s: 0.95,\n      l: 0.5,\n      a: 0.4\n    });\n    let c1_ = c1.toRgbString();\n    let c2 = c1.triad()[1].toRgbString();\n    c2.setAlpha(0.5); // console.log(c1_)\n    // console.log(c2)\n\n    switch (type) {\n      case 'diagonal':\n        return `linear-gradient(to top right, ${c1_}, ${c2})`;\n\n      case 'radial':\n        return `radial-gradient(circle, ${c1_}, ${c2})`;\n\n      case 'horizontal':\n        return `linear-gradient(${c1_}, ${c2})`;\n\n      case 'vertical':\n        return `linear-gradient(to right, ${c1_}, ${c2})`;\n\n      default:\n        return `linear-gradient(to top right, ${c1_}, ${c2})`;\n    }\n  }\n\n  throw new TypeError('uid is required');\n};\n\nfunction hexToRgbA(hex) {\n  let c;\n\n  if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n    c = hex.substring(1).split('');\n\n    if (c.length === 3) {\n      c = [c[0], c[0], c[1], c[1], c[2], c[2]];\n    }\n\n    c = '0x' + c.join('');\n    return 'rgba(' + [c >> 16 & 255, c >> 8 & 255, c & 255].join(',') + ',1)';\n  }\n\n  throw new Error('Bad Hex');\n}","map":{"version":3,"sources":["/Users/marcin/Desktop/flask-react-blog/frontend/src/services/gradient.js"],"names":["hash","require","color","gradient","uid","type","opacity","n","c1","h","s","l","a","c1_","toRgbString","c2","triad","setAlpha","TypeError","hexToRgbA","hex","c","test","substring","split","length","join","Error"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,aAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAArB;;AAEA,OAAO,MAAME,QAAQ,GAAG,CAACC,GAAD,EAAMC,IAAI,GAAG,UAAb,EAAyBC,OAAO,GAAG,CAAnC,KAAyC;AAC7D,MAAIF,GAAJ,EAAS;AACL,UAAMG,CAAC,GAAGP,IAAI,CAACI,GAAD,CAAd;AACA,QAAII,EAAE,GAAGN,KAAK,CAAC;AAACO,MAAAA,CAAC,EAAEF,CAAC,GAAG,GAAR;AAAaG,MAAAA,CAAC,EAAE,IAAhB;AAAsBC,MAAAA,CAAC,EAAE,GAAzB;AAA8BC,MAAAA,CAAC,EAAE;AAAjC,KAAD,CAAd;AACA,QAAIC,GAAG,GAAGL,EAAE,CAACM,WAAH,EAAV;AACA,QAAIC,EAAE,GAAGP,EAAE,CAACQ,KAAH,GAAW,CAAX,EAAcF,WAAd,EAAT;AACAC,IAAAA,EAAE,CAACE,QAAH,CAAY,GAAZ,EALK,CAML;AACA;;AAGA,YAAQZ,IAAR;AACI,WAAK,UAAL;AACI,eAAQ,iCAAgCQ,GAAI,KAAIE,EAAG,GAAnD;;AAEJ,WAAK,QAAL;AACI,eAAQ,2BAA0BF,GAAI,KAAIE,EAAG,GAA7C;;AAEJ,WAAK,YAAL;AACI,eAAQ,mBAAkBF,GAAI,KAAIE,EAAG,GAArC;;AAEJ,WAAK,UAAL;AACI,eAAQ,6BAA4BF,GAAI,KAAIE,EAAG,GAA/C;;AAEJ;AACI,eAAQ,iCAAgCF,GAAI,KAAIE,EAAG,GAAnD;AAdR;AAgBH;;AAED,QAAM,IAAIG,SAAJ,CAAc,iBAAd,CAAN;AACH,CA9BM;;AAgCP,SAASC,SAAT,CAAmBC,GAAnB,EAAuB;AACnB,MAAIC,CAAJ;;AACA,MAAG,2BAA2BC,IAA3B,CAAgCF,GAAhC,CAAH,EAAwC;AACpCC,IAAAA,CAAC,GAAED,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiBC,KAAjB,CAAuB,EAAvB,CAAH;;AACA,QAAGH,CAAC,CAACI,MAAF,KAAa,CAAhB,EAAkB;AACdJ,MAAAA,CAAC,GAAE,CAACA,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAaA,CAAC,CAAC,CAAD,CAAd,EAAmBA,CAAC,CAAC,CAAD,CAApB,EAAyBA,CAAC,CAAC,CAAD,CAA1B,EAA+BA,CAAC,CAAC,CAAD,CAAhC,CAAH;AACH;;AACDA,IAAAA,CAAC,GAAE,OAAKA,CAAC,CAACK,IAAF,CAAO,EAAP,CAAR;AACA,WAAO,UAAQ,CAAEL,CAAC,IAAE,EAAJ,GAAQ,GAAT,EAAeA,CAAC,IAAE,CAAJ,GAAO,GAArB,EAA0BA,CAAC,GAAC,GAA5B,EAAiCK,IAAjC,CAAsC,GAAtC,CAAR,GAAmD,KAA1D;AACH;;AACD,QAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACH","sourcesContent":["const hash = require('string-hash')\nconst color = require('tinycolor2')\n\nexport const gradient = (uid, type = 'diagonal', opacity = 1) => {\n    if (uid) {\n        const n = hash(uid)\n        let c1 = color({h: n % 360, s: 0.95, l: 0.5, a: 0.4})\n        let c1_ = c1.toRgbString()\n        let c2 = c1.triad()[1].toRgbString()\n        c2.setAlpha(0.5)\n        // console.log(c1_)\n        // console.log(c2)\n\n\n        switch (type) {\n            case 'diagonal':\n                return `linear-gradient(to top right, ${c1_}, ${c2})`\n\n            case 'radial':\n                return `radial-gradient(circle, ${c1_}, ${c2})`\n\n            case 'horizontal':\n                return `linear-gradient(${c1_}, ${c2})`\n\n            case 'vertical':\n                return `linear-gradient(to right, ${c1_}, ${c2})`\n\n            default:\n                return `linear-gradient(to top right, ${c1_}, ${c2})`\n        }\n    }\n\n    throw new TypeError('uid is required')\n}\n\nfunction hexToRgbA(hex){\n    let c;\n    if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)){\n        c= hex.substring(1).split('');\n        if(c.length === 3){\n            c= [c[0], c[0], c[1], c[1], c[2], c[2]];\n        }\n        c= '0x'+c.join('');\n        return 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+',1)';\n    }\n    throw new Error('Bad Hex');\n}"]},"metadata":{},"sourceType":"module"}