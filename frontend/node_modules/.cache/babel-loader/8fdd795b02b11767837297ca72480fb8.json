{"ast":null,"code":"var _jsxFileName = \"/Users/marcin/Desktop/flask-react-blog/frontend/src/components/Home/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { NotLogged } from \"../../views/NotLogged\";\nimport { Post } from \"./Post/Post\";\nimport { API } from \"../../services/api\";\nimport { List } from \"antd\";\nimport './layout.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  _s();\n\n  const [posts, setPosts] = useState();\n  useEffect(() => {\n    API.get(\"/post/all\").then(response => {\n      const sorted = response.data.sort((a, b) => b.createdAt.$date - a.createdAt.$date);\n      setPosts(sorted);\n    }).catch(errInfo => console.error(errInfo));\n  }, []);\n  console.log(posts);\n\n  if (posts === undefined || posts === [] || posts === null) {\n    return /*#__PURE__*/_jsxDEV(NotLogged, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(NotLogged, {\n      children: /*#__PURE__*/_jsxDEV(List, {\n        dataSource: posts,\n        renderItem: post => /*#__PURE__*/_jsxDEV(Post, {\n          title: post.title,\n          date: post.createdAt.$date,\n          body: post.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(Home, \"gNpU8K6D9yXWS6G6mu7mBiUIyfk=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/marcin/Desktop/flask-react-blog/frontend/src/components/Home/Home.js"],"names":["React","useEffect","useState","NotLogged","Post","API","List","Home","posts","setPosts","get","then","response","sorted","data","sort","a","b","createdAt","$date","catch","errInfo","console","error","log","undefined","post","title","body"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,SAAR,QAAwB,uBAAxB;AACA,SAAQC,IAAR,QAAmB,aAAnB;AACA,SAAQC,GAAR,QAAkB,oBAAlB;AACA,SAAQC,IAAR,QAAmB,MAAnB;AACA,OAAO,cAAP;;AAEA,OAAO,MAAMC,IAAI,GAAG,MAAM;AAAA;;AAEtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,EAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,GAAG,CAACK,GAAJ,CAAQ,WAAR,EACKC,IADL,CACWC,QAAD,IAAc;AAChB,YAAMC,MAAM,GAAGD,QAAQ,CAACE,IAAT,CAAcC,IAAd,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,SAAF,CAAYC,KAAZ,GAAoBH,CAAC,CAACE,SAAF,CAAYC,KAA7D,CAAf;AACAV,MAAAA,QAAQ,CAACI,MAAD,CAAR;AACH,KAJL,EAKKO,KALL,CAKWC,OAAO,IAAIC,OAAO,CAACC,KAAR,CAAcF,OAAd,CALtB;AAMH,GAPQ,EAON,EAPM,CAAT;AAQAC,EAAAA,OAAO,CAACE,GAAR,CAAYhB,KAAZ;;AAEA,MAAIA,KAAK,KAAKiB,SAAV,IAAuBjB,KAAK,KAAK,EAAjC,IAAuCA,KAAK,KAAK,IAArD,EAA0D;AACtD,wBACI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH,GAJD,MAKK;AACD,wBACI,QAAC,SAAD;AAAA,6BACI,QAAC,IAAD;AACI,QAAA,UAAU,EAAEA,KADhB;AAEI,QAAA,UAAU,EAAEkB,IAAI,iBACR,QAAC,IAAD;AACI,UAAA,KAAK,EAAEA,IAAI,CAACC,KADhB;AAEI,UAAA,IAAI,EAAED,IAAI,CAACR,SAAL,CAAeC,KAFzB;AAGI,UAAA,IAAI,EAAEO,IAAI,CAACE;AAHf;AAAA;AAAA;AAAA;AAAA;AAHZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAcH;AACJ,CAnCM;;GAAMrB,I;;KAAAA,I","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {NotLogged} from \"../../views/NotLogged\";\nimport {Post} from \"./Post/Post\";\nimport {API} from \"../../services/api\";\nimport {List} from \"antd\";\nimport './layout.css'\n\nexport const Home = () => {\n\n    const [posts, setPosts] = useState()\n\n    useEffect(() => {\n        API.get(\"/post/all\")\n            .then((response) => {\n                const sorted = response.data.sort((a, b) => b.createdAt.$date - a.createdAt.$date)\n                setPosts(sorted)\n            })\n            .catch(errInfo => console.error(errInfo))\n    }, []);\n    console.log(posts)\n\n    if (posts === undefined || posts === [] || posts === null){\n        return (\n            <NotLogged/>\n        )\n    }\n    else {\n        return (\n            <NotLogged>\n                <List\n                    dataSource={posts}\n                    renderItem={post => (\n                            <Post\n                                title={post.title}\n                                date={post.createdAt.$date}\n                                body={post.body}\n                            />\n                            )}\n                />\n            </NotLogged>\n        );\n    }\n};"]},"metadata":{},"sourceType":"module"}