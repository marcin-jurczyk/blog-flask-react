{"ast":null,"code":"var _jsxFileName = \"/Users/marcin/Desktop/flask-react-blog/frontend/src/components/Home/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { NotLogged } from \"../../views/NotLogged\";\nimport { Post } from \"./Post/Post\";\nimport { API } from \"../../services/api\";\nimport { List } from \"antd\";\nimport './layout.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  _s();\n\n  const postsAmount = 10;\n  const [postsRequest, setPostsRequest] = useState({\n    postsLoaded: 0,\n    posts: []\n  });\n  const [page, setPage] = useState(1);\n  const loader = useRef(null);\n  useEffect(() => {\n    const observer = new IntersectionObserver(handleObserver);\n\n    if (loader.current) {\n      observer.observe(loader.current);\n    }\n  }, []);\n  useEffect(() => {\n    API.get(`/post/last/${postsAmount}/${postsRequest.postsLoaded}`).then(response => {\n      const loading = response.data === [];\n      console.log(response.data);\n      console.log(loading);\n\n      if (loading === false) {\n        console.log(\"inside\");\n        let newPosts = postsRequest.posts;\n        Array.prototype.push.apply(newPosts, response.data);\n        setPostsRequest({\n          postsLoaded: postsRequest.postsLoaded + Object.keys(response.data).length,\n          posts: newPosts\n        });\n      }\n    }).catch(errInfo => console.error(errInfo));\n  }, [page]);\n\n  const handleObserver = entities => {\n    const target = entities[0];\n\n    if (target.isIntersecting) {\n      setPage(page => page + 1);\n    }\n  };\n\n  const content = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-list\",\n        children: [/*#__PURE__*/_jsxDEV(List, {\n          dataSource: postsRequest.posts,\n          renderItem: post => /*#__PURE__*/_jsxDEV(Post, {\n            title: post.title,\n            date: post.createdAt.$date,\n            body: post.body,\n            author: post.author\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading\",\n          ref: loader,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"lds-ellipsis\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 55\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 61\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 67\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 73\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(NotLogged, {\n    children: content()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}; // export const Home = () => {\n//\n//     // const [posts, setPosts] = useState([{\n//     //     _id: {$oid: \"000\"},\n//     //     title: 'Template title',\n//     //     body: 'Template body',\n//     //     author: {$oid: \"000\"},\n//     //     comments: [],\n//     //     createdAt: {$date: \"000\"},\n//     //     modified: false,\n//     //     lastModifyAt: {$date: \"000\"},\n//     // }])\n//\n//     const amountOfLoadedPosts = 10;\n//     const [alreadyLoaded, setAlreadyLoaded] = useState(0)\n//     const [posts, setPosts] = useState([])\n//\n//     useEffect(() => {\n//         API.get(`/post/last/${amountOfLoadedPosts}/${alreadyLoaded}`)\n//             .then((response) => {\n//                 let newPosts = posts\n//                 Array.prototype.push.apply(newPosts, response.data)\n//                 console.log(newPosts)\n//                 setPosts(newPosts)\n//             })\n//             .catch(errInfo => console.error(errInfo))\n//     }, [alreadyLoaded]);\n//\n//     function loadMore() {\n//         setAlreadyLoaded(alreadyLoaded + amountOfLoadedPosts)\n//     }\n//\n//     if (posts === undefined || posts === [] || posts === null){\n//         return (\n//             <NotLogged/>\n//         )\n//     }\n//     else {\n//         return (\n//             <NotLogged>\n//                 <div>\n//                     <InfiniteScroll\n//                         pageStart={0}\n//                         loadMore={loadMore}\n//                         hasMore={true}\n//                         loader={<div className=\"loader\" key={0}>Loading ...</div>}\n//                         useWindow={false}\n//                     >\n//                         <List\n//                             dataSource={posts}\n//                             renderItem={post => (\n//                                     <Post\n//                                         title={post.title}\n//                                         date={post.createdAt.$date}\n//                                         body={post.body}\n//                                     />\n//                                     )}\n//                         />\n//                     </InfiniteScroll>\n//                 </div>\n//\n//                 {/*<button onClick={loadMore} > </button>*/}\n//\n//             </NotLogged>\n//         );\n//     }\n// };\n// const [posts, setPosts] = useState([{\n//     _id: {$oid: \"000\"},\n//     title: 'Template title',\n//     body: 'Template body',\n//     author: {$oid: \"000\"},\n//     comments: [],\n//     createdAt: {$date: \"000\"},\n//     modified: false,\n//     lastModifyAt: {$date: \"000\"},\n// }])\n// useEffect(() => {\n//     API.get(\"/post/all\")\n//         .then((response) => {\n//             const sorted = response.data.sort((a, b) => b.createdAt.$date - a.createdAt.$date)\n//             setPosts(sorted)\n//         })\n//         .catch(errInfo => console.error(errInfo))\n// }, []);\n// console.log(posts)\n\n_s(Home, \"QzcWp29eTmV8g3Uenvi4+Dk12Ec=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/marcin/Desktop/flask-react-blog/frontend/src/components/Home/Home.js"],"names":["React","useEffect","useRef","useState","NotLogged","Post","API","List","Home","postsAmount","postsRequest","setPostsRequest","postsLoaded","posts","page","setPage","loader","observer","IntersectionObserver","handleObserver","current","observe","get","then","response","loading","data","console","log","newPosts","Array","prototype","push","apply","Object","keys","length","catch","errInfo","error","entities","target","isIntersecting","content","post","title","createdAt","$date","body","author"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport {NotLogged} from \"../../views/NotLogged\";\nimport {Post} from \"./Post/Post\";\nimport {API} from \"../../services/api\";\nimport {List} from \"antd\";\nimport './layout.css'\n\n\nexport const Home = () => {\n\n    const postsAmount = 10;\n    const [postsRequest, setPostsRequest] = useState({\n        postsLoaded: 0,\n        posts: []\n    });\n    const [page, setPage] = useState(1);\n    const loader = useRef(null);\n\n\n    useEffect(() => {\n        const observer = new IntersectionObserver(handleObserver);\n        if (loader.current) {\n            observer.observe(loader.current)\n        }\n    }, []);\n\n    useEffect(() => {\n        API.get(`/post/last/${postsAmount}/${postsRequest.postsLoaded}`)\n            .then((response) => {\n                const loading = response.data === [];\n\n                console.log(response.data)\n                console.log(loading)\n                if (loading === false) {\n                    console.log(\"inside\")\n                    let newPosts = postsRequest.posts\n                    Array.prototype.push.apply(newPosts, response.data)\n                    setPostsRequest({\n                        postsLoaded: postsRequest.postsLoaded + Object.keys(response.data).length,\n                        posts:  newPosts,\n                    })\n                }\n            })\n            .catch(errInfo => console.error(errInfo))\n    }, [page])\n\n    const handleObserver = (entities) => {\n        const target = entities[0];\n        if (target.isIntersecting) {\n            setPage((page) => page + 1)\n        }\n    }\n\n    const content = () => {\n        return (\n            <div >\n                <div className=\"post-list\">\n                    {\n                        <List\n                            dataSource={postsRequest.posts}\n                            renderItem={post => (\n                                <Post\n                                    title={post.title}\n                                    date={post.createdAt.$date}\n                                    body={post.body}\n                                    author={post.author}\n                                />\n                            )}\n                        />\n                    }\n                    {/*{loading === true &&*/}\n                    <div className=\"loading\" ref={loader}>\n                        <div className=\"lds-ellipsis\"><div/><div/><div/><div/></div>\n                    </div>\n                    {/*}*/}\n                </div>\n            </div>\n        )\n    }\n\n\n    return (\n        <NotLogged>\n            {content()}\n        </NotLogged>\n    )\n};\n\n// export const Home = () => {\n//\n//     // const [posts, setPosts] = useState([{\n//     //     _id: {$oid: \"000\"},\n//     //     title: 'Template title',\n//     //     body: 'Template body',\n//     //     author: {$oid: \"000\"},\n//     //     comments: [],\n//     //     createdAt: {$date: \"000\"},\n//     //     modified: false,\n//     //     lastModifyAt: {$date: \"000\"},\n//     // }])\n//\n//     const amountOfLoadedPosts = 10;\n//     const [alreadyLoaded, setAlreadyLoaded] = useState(0)\n//     const [posts, setPosts] = useState([])\n//\n//     useEffect(() => {\n//         API.get(`/post/last/${amountOfLoadedPosts}/${alreadyLoaded}`)\n//             .then((response) => {\n//                 let newPosts = posts\n//                 Array.prototype.push.apply(newPosts, response.data)\n//                 console.log(newPosts)\n//                 setPosts(newPosts)\n//             })\n//             .catch(errInfo => console.error(errInfo))\n//     }, [alreadyLoaded]);\n//\n//     function loadMore() {\n//         setAlreadyLoaded(alreadyLoaded + amountOfLoadedPosts)\n//     }\n//\n//     if (posts === undefined || posts === [] || posts === null){\n//         return (\n//             <NotLogged/>\n//         )\n//     }\n//     else {\n//         return (\n//             <NotLogged>\n//                 <div>\n//                     <InfiniteScroll\n//                         pageStart={0}\n//                         loadMore={loadMore}\n//                         hasMore={true}\n//                         loader={<div className=\"loader\" key={0}>Loading ...</div>}\n//                         useWindow={false}\n//                     >\n//                         <List\n//                             dataSource={posts}\n//                             renderItem={post => (\n//                                     <Post\n//                                         title={post.title}\n//                                         date={post.createdAt.$date}\n//                                         body={post.body}\n//                                     />\n//                                     )}\n//                         />\n//                     </InfiniteScroll>\n//                 </div>\n//\n//                 {/*<button onClick={loadMore} > </button>*/}\n//\n//             </NotLogged>\n//         );\n//     }\n// };\n\n// const [posts, setPosts] = useState([{\n//     _id: {$oid: \"000\"},\n//     title: 'Template title',\n//     body: 'Template body',\n//     author: {$oid: \"000\"},\n//     comments: [],\n//     createdAt: {$date: \"000\"},\n//     modified: false,\n//     lastModifyAt: {$date: \"000\"},\n// }])\n\n// useEffect(() => {\n//     API.get(\"/post/all\")\n//         .then((response) => {\n//             const sorted = response.data.sort((a, b) => b.createdAt.$date - a.createdAt.$date)\n//             setPosts(sorted)\n//         })\n//         .catch(errInfo => console.error(errInfo))\n// }, []);\n// console.log(posts)"]},"metadata":{},"sourceType":"module"}